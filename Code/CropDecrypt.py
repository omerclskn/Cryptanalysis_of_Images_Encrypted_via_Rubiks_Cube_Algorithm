import numpy as np
import random
import PIL.Image
import PIL
import time
import cv2
import matplotlib.pyplot as plt


def read_image(path):
    try:
        image = PIL.Image.open(path)
        return image
    except Exception as e:
        print(e)


def convert_to_grayscale(image):
    grayscale = image.convert("L")
    return grayscale


def matrix_sum(matrix, index, type):
    sum = 0
    if type == 0:  # column:
        for i in range(len(matrix[0])):
            sum += matrix[index][i]
    else:
        for i in range(len(matrix)):
            sum += matrix[i][index]
    return sum


def col_shift_by(direction, num, array, colno):
    length = len(array)
    temp = np.arange(length)
    if direction == 0:  # shift down
        for j in range(0, length):
            temp[j] = array[(j - num + length) % length][colno]
    else:  # shift up
        for j in range(0, length):
            temp[j] = array[(j + num) % length][colno]
    for j in range(0, length):
        array[j][colno] = temp[j]
    return array


def row_shift_by(direction, num, array, rowno):
    length = len(array[0])
    temp = np.arange(length)
    if direction == 0:  # shift right
        for j in range(0, length):
            temp[j] = array[rowno][(j - num + length) % length]
    else:  # shift left
        for j in range(0, length):
            temp[j] = array[rowno][(j + num) % length]
    return temp


def xor_operation(array, KRC, revKRC, i, j):
    if (i % 2) == 0:
        return array[i][j] ^ revKRC[j]
    else:
        return array[i][j] ^ KRC[j]

# --------------------------------------------------------------------------------------------------

start = time.time()
path = "crop_enc.png"
I_O = read_image(path)

mode_to_bpp = {'1': 1, 'L': 8, 'P': 8, 'RGB': 24, 'RGBA': 32, 'CMYK': 32, 'YCbCr': 24, 'I': 32, 'F': 32}
grayscale = convert_to_grayscale(I_O)

I_O = grayscale
img_array = np.array(grayscale)
org_array = np.copy(img_array)
print(img_array)
bpp = 8
# Bitsize bulundu. Grayscale için genellikle bpp=8

max_iteration = 1

M = len(img_array)
N = len(img_array[0])

# KR ve KC dizi değerleri şifreleme aşamasında kaydedilmiş ve burada doğru girilmiş olmalıdır.

KR = [224, 46, 243, 250, 144, 161, 69, 35, 186, 180, 165, 154, 205, 10, 187, 132, 151, 122, 219, 19, 247, 245, 126, 242, 157, 56, 30, 23, 131, 200, 24, 25, 47, 45, 159, 55, 107, 223, 51, 189, 21, 237, 84, 16, 253, 191, 227, 95, 89, 56, 166, 242, 169, 228, 19, 106, 219, 254, 215, 43, 52, 248, 253, 184, 229, 22, 12, 131, 187, 130, 176, 60, 100, 254, 131, 39, 199, 22, 141, 83, 33, 95, 188, 204, 110, 226, 220, 167, 243, 111, 230, 89, 152, 46, 121, 200, 153, 189, 185, 118, 143, 170, 83, 122, 10, 133, 140, 225, 147, 211, 62, 47, 97, 94, 30, 28, 132, 97, 130, 208, 90, 43, 143, 70, 207, 137, 144, 146, 168, 169, 12, 26, 12, 177, 175, 75, 38, 71, 11, 190, 239, 148, 86, 140, 115, 46, 225, 140, 74, 149, 12, 190, 165, 120, 143, 116, 129, 63, 29, 17, 43, 21, 114, 153, 229, 212, 206, 197, 250, 112, 123, 243, 209, 9, 89, 128, 109, 1, 195, 14, 199, 249, 39, 57, 116, 176, 225, 25, 141, 217, 17, 66, 31, 4, 131, 75, 29, 5, 189, 33, 42, 135, 128, 25, 209, 234, 5, 7, 242, 162, 92, 6, 113, 88, 152, 23, 72, 177, 156, 4, 147, 85, 202, 243, 144, 57, 17, 147, 110, 216, 102, 2, 15, 163, 220, 126, 81, 73, 177, 59, 32, 145, 20, 220, 184, 38, 162, 120, 100, 187, 173, 223, 213, 52, 117, 200, 158, 219, 150, 85, 136, 178, 50, 12, 83, 152, 105, 153, 123, 196, 62, 204, 114, 112, 170, 186, 169, 143, 152, 85, 249, 185, 36, 113, 9, 61, 0, 72, 158, 60, 18, 124, 42, 235, 66, 129, 155, 38, 161, 226, 188, 198, 122, 174, 158, 9, 171, 210, 177, 7, 65, 128, 65, 166, 233, 218, 229, 225, 97, 21, 99, 114, 132, 199, 166, 43, 233, 197, 71, 52, 20, 200, 94, 208, 192, 105, 158, 233, 143, 90, 226, 217, 133, 233, 21, 87, 116, 71, 7, 42, 107, 126, 252, 205, 189, 95, 226, 84, 65, 211, 178, 32, 151, 102, 189, 235, 110, 230, 183, 102, 174, 119, 103, 100, 48, 237, 243, 85, 175, 234, 189, 55, 189, 26, 88, 9, 228, 39, 104, 37, 55, 1, 212, 5, 244, 113, 45, 49, 136, 81, 43, 126, 93, 211, 11, 36, 150, 112, 50, 101, 73, 152, 131, 238, 18, 199, 20, 134, 82, 96, 221, 251, 246, 217, 213, 225, 16, 182, 74, 78, 214, 174, 97, 97, 50, 39, 58, 185, 198, 127, 26, 74, 108, 113, 243, 242, 195, 57, 106, 58, 46, 223, 214, 7, 101, 55, 124, 88, 84, 100, 74, 166, 24, 163, 151, 166, 123, 247, 52, 181, 197, 96, 69, 66, 99, 0, 246, 180, 35, 35, 235, 90, 234, 120, 36, 182, 135, 126, 118, 114, 252, 113, 125, 77, 144, 28, 210, 61, 66, 105, 69, 236, 173, 29, 231, 22, 146, 252, 209, 87, 189, 33]
KC = [168, 66, 114, 117, 172, 219, 6, 247, 113, 115, 198, 185, 221, 10, 116, 33, 202, 237, 225, 207, 186, 93, 90, 179, 111, 194, 126, 219, 104, 241, 63, 150, 2, 38, 105, 153, 138, 6, 255, 177, 154, 186, 90, 105, 190, 20, 153, 148, 252, 162, 255, 146, 100, 105, 3, 230, 231, 132, 143, 60, 88, 16, 215, 172, 12, 47, 244, 198, 168, 21, 143, 209, 82, 2, 186, 192, 162, 19, 195, 106, 78, 70, 112, 212, 105, 217, 131, 35, 14, 101, 35, 71, 90, 137, 180, 2, 217, 23, 236, 142, 227, 41, 32, 69, 181, 204, 172, 189, 35, 99, 143, 225, 23, 31, 167, 106, 141, 27, 199, 199, 145, 46, 202, 28, 168, 107, 78, 123, 37, 36, 172, 114, 243, 74, 96, 120, 205, 81, 7, 178, 251, 49, 133, 208, 188, 233, 76, 225, 49, 108, 107, 59, 240, 177, 95, 136, 220, 73, 37, 152, 163, 157, 78, 113, 175, 137, 253, 247, 255, 100, 227, 11, 176, 30, 182, 83, 183, 226, 172, 33, 245, 104, 201, 221, 133, 161, 15, 191, 76, 37, 110, 203, 116, 25, 170, 49, 109, 165, 162, 171, 16, 83, 58, 34, 94, 52, 81, 144, 16, 7, 232, 132, 138, 72, 174, 191, 37, 240, 29, 158, 186, 187, 17, 30, 44, 57, 140, 73, 168, 37, 172, 76, 102, 49, 255, 66, 73, 82, 135, 117, 191, 161, 48, 226, 61, 129, 49, 64, 175, 238, 95, 28, 18, 53, 203, 126, 46, 6, 64, 67, 168, 190, 115, 124, 185, 70, 12, 187, 196, 26, 134, 235, 104, 78, 36, 95, 19, 217, 197, 143, 14, 136, 22, 115, 86, 134, 121, 26, 102, 6, 215, 206, 21, 83, 168, 27, 26, 123, 249, 208, 213, 27, 150, 248, 13, 96, 254, 60, 161, 6, 93, 172, 22, 102, 87, 91, 94, 155, 153, 239, 26, 60, 178, 226, 138, 139, 230, 12, 123, 206, 208, 143, 87, 39, 247, 253, 176, 38, 66, 128, 163, 146, 119, 139, 84, 238, 159, 203, 123, 22, 33, 13, 220, 16, 172, 0, 18, 228, 114, 135, 243, 193, 68, 1, 180, 183, 211, 61, 212, 176, 66, 232, 55, 61, 56, 200, 247, 187, 90, 64, 158, 163, 203, 255, 204, 185, 14, 67, 116, 201, 21, 187, 55, 128, 10, 175, 239, 55, 172, 60, 149, 65, 101, 150, 203, 5, 142, 143, 111, 169, 207, 217, 75, 18, 155, 156, 213, 92, 36, 57, 8, 195, 142, 40, 84, 164, 125, 221, 4, 91, 40, 142, 81, 12, 252, 119, 151, 255, 208, 80, 69, 48, 97, 208, 205, 118, 87, 190, 124, 245, 250, 228, 64, 36, 184, 157, 36, 152, 22, 74, 250, 134, 8, 177, 208, 101, 228, 252, 135, 62, 240, 181, 57, 129, 208, 152, 50, 114, 184, 226, 238, 25, 7, 33, 173, 248, 209, 53, 144, 254, 167, 115, 125, 235, 212, 63, 240, 187, 112, 141, 42, 140, 39, 92, 21, 29, 36, 156, 118, 193, 13, 38]

print("\n----- Decryption ----")

revKC = KC[::-1]
revKR = KR[::-1]

# DECRYPT XOR OPERATIONS

for j in range(0, N):
    for i in range(0, M):
        img_array[i][j] = xor_operation(img_array, KR, revKR, i, j)

for i in range(0, M):
    for j in range(0, N):
        img_array[i][j] = xor_operation(img_array, KC, revKC, i, j)

# DECRYPT SUM-SHIFT OPERATIONS !!

for i in range(0, N):
    Mb = matrix_sum(img_array, i, 1) % 2
    img_array = col_shift_by(not Mb, abs(KC[i] % N), img_array, i)


for i in range(0, M):
    Ma = matrix_sum(img_array, i, 0) % 2
    img_array[i] = row_shift_by(not Ma, abs(KR[i] % M), img_array, i)

savepath = "dec_" + format(path)
dec_photo = PIL.Image.fromarray(img_array)
dec_photo = dec_photo.save(savepath)

print("---- Decrypted Matrix: \n" + format(img_array))

plt.scatter(img_array, org_array)
plt.show()
corr2 = np.corrcoef(org_array.flat, img_array.flat)
print("\nCorrelation Between Decrypted and Original Matrix: "+format(corr2[0, 1]))
end = time.time()
print(path + " Dosyasının Şifreleme ve Deşifreleme Süresi: " + format(end - start))